Ссылка на репозиторий: https://github.com/mgladchenko/rest-tests-13.05.2019
Для подключения serenity-rest-assured вместо rest-assured выполните следующие действия:

1)Внести изменения в pom.xml файл в директории проекта:
 - Для подключения библиотеки, замените dependency maven в pom.xml c rest-assured на
net.serenity-bdd.serenity-rest-assured последней версии;
 - Для ведения лога Ваших тестов подключите библиотеку логирования прописав соответствующую
 dependency в pom.xml файл (например: org.slf4j.slf4j-simple );
 - Для возможности запуска тестов с использования функциональностей Serenity через Serenity
 runner пропишите в pom.xml файл dependency net.serenity-bdd.serenity-junit последней версии;
 - Для возможности формирования интерактивного отчета через консоль командой
mvn serenity:aggregate в раздел <build><plugins> добавить плагин
net.serenity-bdd.maven.plugins.serenity-maven-plugin

2)Выделить этапы (степы) прохождения теста в отчете лога:
!Учесть изменения прописанные в пункте 1. "Внести изменения в pom.xml файл в директории проекта";
- Инициализировать переменную статического обьекта Logger с присвоением ему логера соответствующего
класса в LoggerFactory;
- Убедится в импорте библиотеки логерра прописаного в dependency в pom.xml
(например: import org.slf4j.Logger, import org.slf4j.LoggerFactory);
- Для отображения в логе шаблонных данных использовать статический обьект SerenityRest
(например: SerenityRest.enableLoggingOfRequestAndResponseIfValidationFails())

3)Реализовать запуск тестов с использования функциональностей Serenity через Serenity runner:
- Клас отвечающий за запуск тестов пометить аннотацией: @RunWith(SerenityRunner.class).
!Учесть изменения прописанные в пункте 1. "Внести изменения в pom.xml файл в директории проекта";

4)Реализовать выделение этапов прохождения теста в итоговом отчете Serenity:
- В классе отвечающем за реализацию блоков функциональностей тестов пометить соответствующие
методы анотацией "@Step";
- В классе отвечающем за запуск тестов, вызов обьекта класса, отвечающего за реализацию блоков
функциональностей тестов пометить аннотацией "@Steps";
!Учесть изменения прописанные в пункте 1. "Внести изменения в pom.xml файл в директории проекта";

Other:
1)Для генерации отчета Serenity нам нужен файл index.html из папки target.site.serenity, если мы запускаем
тест из командной строки посредством команды mvn clean verify то он формируется автоматически, а в случае если
мы запускали тест напрямую из IDE то после прохождения теста нам нужно собрать
файл index.html командой через консоль mvn serenity:aggregate
2)@Concurrent(threads = "4") //позволяет запускать в многопоточности, без указания аргумента  threads,
запускается в двух потоках
3)Паралелизация в Serenity происходит через паралелизацию методов. Паралелизация классов
не поддерживается (поскольку возможна ситуация когда два класса работают с одними и теми же сущностями)
4)Запуск и попадание в отчет Serenity часто зависит от названия тестового класса,
он должен содержать в себе слово test.
5)Для запуска одного конкретного теста в pom.xml нужно добавить следующее:
- в раздел properties:
    <properties>
            <test.name>*</test.name>
    </properties>
- в раздел plugin.maven-surefire-plugin
    <configuration>
        <includes>
            <include>**/tests/**/${test.name}.java</include> - подключаются все класы, которые находятся в папке **/tests/** и заканчиваются на test
        </includes>                                            или если указано ${test.name}.java то все классы с соответствующим именем
    </configuration>                                           или можем указать тот паттерн имени класов который нам нужен для запуска
                                                               и все классы содержащие данный паттерн запустятся например: ${test.name}.java,
                                                               а запуск через mvn clean verify -Dtest.name=*Store* (запустятся только классы содержащие в названии Store)
- после добавлений указаных выше в файл pom.xml запускаем тест из консоли командой:
    mvn clean verify -Dtest.name=PetCreateCombinationsTest
6) Для того чтобы добавить папку ресурсы в папку test - создаем в ней directory resources
и правый клик на ней ->  Mark Directory As -> Test Resources Root

7) Для перехвата и записи всех запросовкоторые получал и отправлял браузер:
postman interseptor
charles proxy

8)